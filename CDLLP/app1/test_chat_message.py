from app1.DAO import Chat_MessageDAO
from app1.models import Chat_Message
import unittest,random,datetime,time
import generator

def generote_message():
    message = []
    for i in range(10):
        message_cell = Chat_Message()
        message.append(message_cell)   #message是一个列表，其中的每项都是一个Chat_Message()对象，想要对其分别赋值，只能用现在的这种方法
    for i in range(10):
        message[i].messagetype = int(random.random()*100) #写这里的时候，必须加上int，否则会报错
        message[i].contenttype = int(random.random()*100)
        message[i].send_id = int(random.random()*100)
        message[i].receive_id = int(random.random()*100)
        message[i].abid = generator.random_str()
        message[i].content = generator.random_str(min_chars=100,max_chars=500)
        message[i].time = time.strftime('%H:%M:%S',time.localtime(time.time()))
        message[i].date = time.strftime('%Y-%m-%d',time.localtime(time.time()))
        message[i].imgone = generator.random_str(min_chars=50,max_chars=200)
    return message

class TestChat_Message(unittest.TestCase):
    def chat_message_add(self):
        message = generote_message()
        print('AAAAAAAAAAAAAAAAAAAAAAAAa')
        message_id = []
        random_id = random.randint(0,len(message))
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        message1 = Chat_Message.objects.filter(id=message_id[random_id])
        self.assertEqual([message[random_id].messagetype,message[random_id].content],[message1[0].messagetype,message1[0].content])

    def querysixinnumwithhe(self):
        message = generote_message()
        message_id = []
        message[0].abid = 'abbccc'
        message[5].abid = 'abbccc'
        message[1].abid = 'abbccc'
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        count = Chat_MessageDAO.querysixinnumwithhe(abid='abbccc')
        self.assertEqual(3,count)

    def queryAllsixinwithhe(self):
        message = generote_message()
        message_id = []
        message[0].abid = 'abbccc'
        message[5].abid = 'abbccc'
        message[1].abid = 'abbccc'
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        count = Chat_MessageDAO.queryAllsixinwithhe(abid='abbccc',start=0,pagesize=2)
        print(count[0].id,count[1].id,count[0].abid)
        self.assertEqual([6,2], [count[0].id,count[1].id])

    def queryAllsixin(self):
        message = generote_message()
        message_id = []
        message[0].receive_id = 100
        message[5].receive_id = 100
        message[1].receive_id = 100
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        count = Chat_MessageDAO.queryAllsixin(receive_id=100,start=0,pagesize=2)
        print(count[0].id,count[1].id,count[0].receive_id)
        self.assertEqual([6,2], [count[0].id,count[1].id])

    def updatemessageformessage(self):
        message = generote_message()
        message_id = []
        chat_message = message[8]
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        Chat_MessageDAO.updatemessageformessage(id=5,chat_message=chat_message)
        self.assertEqual(Chat_Message.objects.filter(id=9)[0].content,Chat_Message.objects.filter(id=5)[0].content)
        self.assertNotEqual(Chat_Message.objects.filter(id=9)[0].content,Chat_Message.objects.filter(id=1)[0].content)

    def test_delmessageforid(self):
        message = generote_message()
        message_id = []
        chat_message = message[8]
        for i in range(len(message)):
            message_id.append(Chat_MessageDAO.addMessage(message[i]))
        Chat_MessageDAO.delmessageforid(id=7)
        self.assertEqual(list(Chat_Message.objects.all().values('id')),[{'id':1},{'id':2},{'id':3},{'id':4},{'id':5},{'id':6},{'id':8},{'id':9},{'id':10}])

# def test_suite():
#     suite = unittest.TestSuite()
#
#     tests = [TestChat_Message("test_chat_message_add"), TestChat_Message("test_querysixinnumwithhe"), TestChat_Message("test_queryAllsixinwithhe")]   # 添加测试用例列表
#     suite.addTests(tests)   # 将测试用例列表添加到测试组中
    # suite中也可以套suite

    # 将测试结果输出到测试报告中
    # with open('UnittestTextReport.txt', 'a') as f:
    #     runner = unittest.TextTestRunner(stream=f, verbosity=2)
    #     runner.run(suite)

    # 将测试结果输出到测试报告html中
    # with open('HTMLReport.html', 'w') as f:
    #     runner = HTMLTestRunner(stream=f,
    #                             title='MathFunc Test Report',
    #                             description='generated by HTMLTestRunner.',
    #                             verbosity=2
    #                             )
    #     runner.run(suite)

    # 直接将结果输出到控制台